Compiling for Windows on Debian linux

Compiling for Windows on linux requires setting up the cross-compiler environment.
This guide is for v0.5 and v0.6 branch.

### Install all the dependencies

> sudo apt-get install p7zip-full autoconf automake autopoint bash bison bzip2 cmake flex gettext git g++ gperf intltool libffi-dev libtool libltdl-dev libssl-dev libxml-parser-perl make openssl patch perl pkg-config python ruby scons sed unzip wget xz-utils g++-multilib libc6-dev-i386

### Install MXE

> MXE (M cross environment) is a Makefile that compiles a cross compiler and cross compiles many free libraries such as SDL and Qt. Thus, it provides a nice cross compiling environment for various target platforms.

It is best to clone MXE to `/opt`

> cd /opt

> git clone https://github.com/mxe/mxe.git

### Compile slimcoin dependencies

#### Compile boost:
> make MXE_TARGETS="i686-w64-mingw32.static" boost

#### Compile QT5:
> make MXE_TARGETS="i686-w64-mingw32.static" qttools

#### Compile miniupnpc:

MXE does not provide the script for miniupnpc so we must do this manually.

> wget http://miniupnp.free.fr/files/download.php?file=miniupnpc-1.9.tar.gz

save the following as `compile.sh` in the miniupnpc source directory.

```
#!/bin/bash
MXE_PATH=/opt/mxe

CC=$MXE_PATH/usr/bin/i686-w64-mingw32.static-gcc \
AR=$MXE_PATH/usr/bin/i686-w64-mingw32.static-ar \
CFLAGS="-DSTATICLIB -I$MXE_PATH/usr/i686-w64-mingw32.static/include" \
LDFLAGS="-L$MXE_PATH/usr/i686-w64-mingw32.static/lib" \
make libminiupnpc.a

mkdir $MXE_PATH/usr/i686-w64-mingw32.static/include/miniupnpc
cp *.h $MXE_PATH/usr/i686-w64-mingw32.static/include/miniupnpc
cp libminiupnpc.a $MXE_PATH/usr/i686-w64-mingw32.static/lib
```
> chmod ugo+x compile.sh

Compile by executing:

> compile.sh

#### Compile libdb

MXE does not provide the script for libdb so we must do this manually.

> wget http://download.oracle.com/berkeley-db/db-4.8.30.tar.gz

Save the following as `compile.sh`:

```
#!/bin/bash
MXE_PATH=/opt/mxe
sed -i "s/WinIoCtl.h/winioctl.h/g" src/dbinc/win_db.h
mkdir build_mxe
cd build_mxe

CC=$MXE_PATH/usr/bin/i686-w64-mingw32.static-gcc \
CXX=$MXE_PATH/usr/bin/i686-w64-mingw32.static-g++ \
../dist/configure \
        --disable-replication \
        --enable-mingw \
        --enable-cxx \
        --host x86 \
        --prefix=$MXE_PATH/usr/i686-w64-mingw32.static

make
make install
```
> chmod ugo+x compile.sh

Compile by executing:

> compile.sh

## Compile Slimcoin:

> export PATH=/opt/mxe/usr/bin:$

> cd slimcoin

Save the following as `compile.sh`:

```
#!/bin/bash
MXE_INCLUDE_PATH=/opt/mxe/usr/i686-w64-mingw32.static/include
MXE_LIB_PATH=/opt/mnt/mxe/usr/i686-w64-mingw32.static/lib

i686-w64-mingw32.static-qmake-qt5 \
        BOOST_LIB_SUFFIX=-mt \
        BOOST_THREAD_LIB_SUFFIX=_win32-mt \
        BOOST_INCLUDE_PATH=$MXE_INCLUDE_PATH/boost \
        BOOST_LIB_PATH=$MXE_LIB_PATH \
        OPENSSL_INCLUDE_PATH=$MXE_INCLUDE_PATH/openssl \
        OPENSSL_LIB_PATH=$MXE_LIB_PATH \
        BDB_INCLUDE_PATH=$MXE_INCLUDE_PATH \
        BDB_LIB_PATH=$MXE_LIB_PATH \
        MINIUPNPC_INCLUDE_PATH=$MXE_INCLUDE_PATH \
        MINIUPNPC_LIB_PATH=$MXE_LIB_PATH \
        QMAKE_LRELEASE=/opt/mxe/usr/i686-w64-mingw32.static/qt5/bin/lrelease slimcoin-qt.pro

make -f Makefile.Release
```

Compile by executing:

> compile.sh

That's is, `slimcoin-qt.exe` can be found in `release` directory.